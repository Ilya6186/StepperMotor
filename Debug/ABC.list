
ABC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000005c  08002bc8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08002bc8  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f81  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7f  00000000  00000000  0002a049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000857  00000000  00000000  0002c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c53  00000000  00000000  0002d20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba27  00000000  00000000  00046e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a709  00000000  00000000  00052889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003124  00000000  00000000  000dcf94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e00b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b28 	.word	0x08002b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002b28 	.word	0x08002b28

0800014c <HAL_GPIO_EXTI_Callback>:
volatile uint32_t time_irq = 0;

StepMotor* motor;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
}
 8000156:	bf00      	nop
 8000158:	370c      	adds	r7, #12
 800015a:	46bd      	mov	sp, r7
 800015c:	bc80      	pop	{r7}
 800015e:	4770      	bx	lr

08000160 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		// вызывается по окончанию периода шим
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	motor->checkMotorInCallback(htim);
 8000168:	4b04      	ldr	r3, [pc, #16]	; (800017c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	6879      	ldr	r1, [r7, #4]
 800016e:	4618      	mov	r0, r3
 8000170:	f002 fa55 	bl	800261e <_ZN9StepMotor20checkMotorInCallbackEP17TIM_HandleTypeDef>
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	200000c0 	.word	0x200000c0

08000180 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000180:	b590      	push	{r4, r7, lr}
 8000182:	b09f      	sub	sp, #124	; 0x7c
 8000184:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb7f 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f8b7 	bl	80002fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f96d 	bl	800046c <_ZL12MX_GPIO_Initv>
  MX_TIM3_Init();
 8000192:	f000 f903 	bl	800039c <_ZL12MX_TIM3_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM_HandleTypeDef *phtim3 = &htim3;
 8000196:	4b54      	ldr	r3, [pc, #336]	; (80002e8 <main+0x168>)
 8000198:	667b      	str	r3, [r7, #100]	; 0x64

  motor = new StepMotor(GPIOA, enable_Pin, GPIOA, dir_Pin, phtim3, TIM_CHANNEL_1);
 800019a:	204c      	movs	r0, #76	; 0x4c
 800019c:	f002 fb66 	bl	800286c <_Znwj>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461c      	mov	r4, r3
 80001a4:	2300      	movs	r3, #0
 80001a6:	9302      	str	r3, [sp, #8]
 80001a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	2310      	movs	r3, #16
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	4b4e      	ldr	r3, [pc, #312]	; (80002ec <main+0x16c>)
 80001b2:	2220      	movs	r2, #32
 80001b4:	494d      	ldr	r1, [pc, #308]	; (80002ec <main+0x16c>)
 80001b6:	4620      	mov	r0, r4
 80001b8:	f002 f97b 	bl	80024b2 <_ZN9StepMotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
 80001bc:	4b4c      	ldr	r3, [pc, #304]	; (80002f0 <main+0x170>)
 80001be:	601c      	str	r4, [r3, #0]
  Debounce buttonB14(GPIOB, GPIO_PIN_14, 100);
 80001c0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80001c4:	2364      	movs	r3, #100	; 0x64
 80001c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001ca:	494a      	ldr	r1, [pc, #296]	; (80002f4 <main+0x174>)
 80001cc:	f002 f8d8 	bl	8002380 <_ZN8DebounceC1EP12GPIO_TypeDeftm>
  Debounce buttonB13(GPIOB, GPIO_PIN_13, 100);
 80001d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80001d4:	2364      	movs	r3, #100	; 0x64
 80001d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001da:	4946      	ldr	r1, [pc, #280]	; (80002f4 <main+0x174>)
 80001dc:	f002 f8d0 	bl	8002380 <_ZN8DebounceC1EP12GPIO_TypeDeftm>
  Debounce buttonB15(GPIOB, GPIO_PIN_15, 100);
 80001e0:	f107 001c 	add.w	r0, r7, #28
 80001e4:	2364      	movs	r3, #100	; 0x64
 80001e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80001ea:	4942      	ldr	r1, [pc, #264]	; (80002f4 <main+0x174>)
 80001ec:	f002 f8c8 	bl	8002380 <_ZN8DebounceC1EP12GPIO_TypeDeftm>
  Debounce buttonB12(GPIOB, GPIO_PIN_12, 100);
 80001f0:	1d38      	adds	r0, r7, #4
 80001f2:	2364      	movs	r3, #100	; 0x64
 80001f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001f8:	493e      	ldr	r1, [pc, #248]	; (80002f4 <main+0x174>)
 80001fa:	f002 f8c1 	bl	8002380 <_ZN8DebounceC1EP12GPIO_TypeDeftm>
  HAL_TIM_Base_Start_IT(&htim3);
 80001fe:	483a      	ldr	r0, [pc, #232]	; (80002e8 <main+0x168>)
 8000200:	f001 fa5c 	bl	80016bc <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(buttonB14.CheckButton())			// red
 8000204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000208:	4618      	mov	r0, r3
 800020a:	f002 f8d9 	bl	80023c0 <_ZN8Debounce11CheckButtonEv>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d028      	beq.n	8000266 <main+0xe6>
	  {
		  	motor->setDirection(uint8_t(0));
 8000214:	4b36      	ldr	r3, [pc, #216]	; (80002f0 <main+0x170>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fa10 	bl	8002640 <_ZN9StepMotor12setDirectionEh>
			motor->setMaxSpeed(60000);
 8000220:	4b33      	ldr	r3, [pc, #204]	; (80002f0 <main+0x170>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000228:	4618      	mov	r0, r3
 800022a:	f002 fa38 	bl	800269e <_ZN9StepMotor11setMaxSpeedEm>
			motor->setMinSpeed(100);
 800022e:	4b30      	ldr	r3, [pc, #192]	; (80002f0 <main+0x170>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2164      	movs	r1, #100	; 0x64
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fa3f 	bl	80026b8 <_ZN9StepMotor11setMinSpeedEm>
			motor->setAccelerationStep(3000, 30000);
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <main+0x170>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000242:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fa9d 	bl	8002786 <_ZN9StepMotor19setAccelerationStepEmm>
		  	motor->startMotion(320000);
 800024c:	4b28      	ldr	r3, [pc, #160]	; (80002f0 <main+0x170>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4929      	ldr	r1, [pc, #164]	; (80002f8 <main+0x178>)
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fa08 	bl	8002668 <_ZN9StepMotor11startMotionEm>
		  	motor->setRetention(1);
 8000258:	4b25      	ldr	r3, [pc, #148]	; (80002f0 <main+0x170>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2101      	movs	r1, #1
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fa37 	bl	80026d2 <_ZN9StepMotor12setRetentionEb>
 8000264:	e7ce      	b.n	8000204 <main+0x84>
	  }
	  else if(buttonB13.CheckButton())	//blue
 8000266:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800026a:	4618      	mov	r0, r3
 800026c:	f002 f8a8 	bl	80023c0 <_ZN8Debounce11CheckButtonEv>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d01a      	beq.n	80002ac <main+0x12c>
	  {
			motor->setDirection(uint8_t(1));
 8000276:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <main+0x170>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2101      	movs	r1, #1
 800027c:	4618      	mov	r0, r3
 800027e:	f002 f9df 	bl	8002640 <_ZN9StepMotor12setDirectionEh>
			motor->setMaxSpeed(1600);
 8000282:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <main+0x170>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fa07 	bl	800269e <_ZN9StepMotor11setMaxSpeedEm>
			motor->startMotion(1600);
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <main+0x170>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000298:	4618      	mov	r0, r3
 800029a:	f002 f9e5 	bl	8002668 <_ZN9StepMotor11startMotionEm>
			motor->setRetention(1);
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <main+0x170>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2101      	movs	r1, #1
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fa14 	bl	80026d2 <_ZN9StepMotor12setRetentionEb>
 80002aa:	e7ab      	b.n	8000204 <main+0x84>
	  }
	  else if(buttonB15.CheckButton())		// green
 80002ac:	f107 031c 	add.w	r3, r7, #28
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 f885 	bl	80023c0 <_ZN8Debounce11CheckButtonEv>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d006      	beq.n	80002ca <main+0x14a>
	  {
		  motor->setRetention(1);
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <main+0x170>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2101      	movs	r1, #1
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fa05 	bl	80026d2 <_ZN9StepMotor12setRetentionEb>
 80002c8:	e79c      	b.n	8000204 <main+0x84>
	  }
	  else if(buttonB12.CheckButton())			//white
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 f877 	bl	80023c0 <_ZN8Debounce11CheckButtonEv>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d095      	beq.n	8000204 <main+0x84>
	  {
		  motor->setRetention(0);
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <main+0x170>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 f9f7 	bl	80026d2 <_ZN9StepMotor12setRetentionEb>
	  if(buttonB14.CheckButton())			// red
 80002e4:	e78e      	b.n	8000204 <main+0x84>
 80002e6:	bf00      	nop
 80002e8:	20000078 	.word	0x20000078
 80002ec:	40010800 	.word	0x40010800
 80002f0:	200000c0 	.word	0x200000c0
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	0004e200 	.word	0x0004e200

080002fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b090      	sub	sp, #64	; 0x40
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2228      	movs	r2, #40	; 0x28
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fb84 	bl	8002a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031e:	2301      	movs	r3, #1
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000326:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800033a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800033e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fddb 	bl	8000f00 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2301      	movne	r3, #1
 8000352:	2300      	moveq	r3, #0
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800035a:	f000 f92d 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2302      	movs	r3, #2
 8000364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2102      	movs	r1, #2
 8000378:	4618      	mov	r0, r3
 800037a:	f001 f843 	bl	8001404 <HAL_RCC_ClockConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	bf14      	ite	ne
 8000384:	2301      	movne	r3, #1
 8000386:	2300      	moveq	r3, #0
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800038e:	f000 f913 	bl	80005b8 <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	; 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08a      	sub	sp, #40	; 0x28
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a2:	f107 0320 	add.w	r3, r7, #32
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]
 80003ba:	615a      	str	r2, [r3, #20]
 80003bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003be:	4b29      	ldr	r3, [pc, #164]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 80003c0:	4a29      	ldr	r2, [pc, #164]	; (8000468 <_ZL12MX_TIM3_Initv+0xcc>)
 80003c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 73-1;
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 80003c6:	2248      	movs	r2, #72	; 0x48
 80003c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ca:	4b26      	ldr	r3, [pc, #152]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 80003d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d8:	4b22      	ldr	r3, [pc, #136]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 80003e6:	f001 f9bb 	bl	8001760 <HAL_TIM_PWM_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	bf14      	ite	ne
 80003f0:	2301      	movne	r3, #1
 80003f2:	2300      	moveq	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80003fa:	f000 f8dd 	bl	80005b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000406:	f107 0320 	add.w	r3, r7, #32
 800040a:	4619      	mov	r1, r3
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 800040e:	f001 ff47 	bl	80022a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	bf14      	ite	ne
 8000418:	2301      	movne	r3, #1
 800041a:	2300      	moveq	r3, #0
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000422:	f000 f8c9 	bl	80005b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000426:	2360      	movs	r3, #96	; 0x60
 8000428:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	4619      	mov	r1, r3
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 800043e:	f001 fc3b 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf14      	ite	ne
 8000448:	2301      	movne	r3, #1
 800044a:	2300      	moveq	r3, #0
 800044c:	b2db      	uxtb	r3, r3
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000452:	f000 f8b1 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <_ZL12MX_TIM3_Initv+0xc8>)
 8000458:	f000 f914 	bl	8000684 <HAL_TIM_MspPostInit>

}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	; 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000078 	.word	0x20000078
 8000468:	40000400 	.word	0x40000400

0800046c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b48      	ldr	r3, [pc, #288]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a47      	ldr	r2, [pc, #284]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b45      	ldr	r3, [pc, #276]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a41      	ldr	r2, [pc, #260]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a3b      	ldr	r2, [pc, #236]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b39      	ldr	r3, [pc, #228]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a35      	ldr	r2, [pc, #212]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <_ZL12MX_GPIO_Initv+0x138>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	4830      	ldr	r0, [pc, #192]	; (80005a8 <_ZL12MX_GPIO_Initv+0x13c>)
 80004e8:	f000 fcd9 	bl	8000e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dir_Pin|enable_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2130      	movs	r1, #48	; 0x30
 80004f0:	482e      	ldr	r0, [pc, #184]	; (80005ac <_ZL12MX_GPIO_Initv+0x140>)
 80004f2:	f000 fcd4 	bl	8000e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2101      	movs	r1, #1
 80004fa:	482d      	ldr	r0, [pc, #180]	; (80005b0 <_ZL12MX_GPIO_Initv+0x144>)
 80004fc:	f000 fccf 	bl	8000e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	2301      	movs	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2302      	movs	r3, #2
 8000510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4619      	mov	r1, r3
 8000518:	4823      	ldr	r0, [pc, #140]	; (80005a8 <_ZL12MX_GPIO_Initv+0x13c>)
 800051a:	f000 fb25 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir_Pin enable_Pin */
  GPIO_InitStruct.Pin = dir_Pin|enable_Pin;
 800051e:	2330      	movs	r3, #48	; 0x30
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2302      	movs	r3, #2
 800052c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	481d      	ldr	r0, [pc, #116]	; (80005ac <_ZL12MX_GPIO_Initv+0x140>)
 8000536:	f000 fb17 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800053a:	2301      	movs	r3, #1
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	4817      	ldr	r0, [pc, #92]	; (80005b0 <_ZL12MX_GPIO_Initv+0x144>)
 8000552:	f000 fb09 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000556:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <_ZL12MX_GPIO_Initv+0x148>)
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000560:	2302      	movs	r3, #2
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <_ZL12MX_GPIO_Initv+0x144>)
 800056c:	f000 fafc 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800057a:	2302      	movs	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <_ZL12MX_GPIO_Initv+0x144>)
 8000586:	f000 faef 	bl	8000b68 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	2028      	movs	r0, #40	; 0x28
 8000590:	f000 fab3 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000594:	2028      	movs	r0, #40	; 0x28
 8000596:	f000 facc 	bl	8000b32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059a:	bf00      	nop
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40011000 	.word	0x40011000
 80005ac:	40010800 	.word	0x40010800
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	10110000 	.word	0x10110000

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <HAL_MspInit+0x6c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <HAL_MspInit+0x6c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <HAL_MspInit+0x6c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <HAL_MspInit+0x6c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <HAL_MspInit+0x6c>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <HAL_MspInit+0x6c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2005      	movs	r0, #5
 8000600:	f000 fa7b 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000604:	2005      	movs	r0, #5
 8000606:	f000 fa94 	bl	8000b32 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_MspInit+0x70>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_MspInit+0x70>)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000

08000638 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <HAL_TIM_PWM_MspInit+0x44>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d113      	bne.n	8000672 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_TIM_PWM_MspInit+0x48>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_PWM_MspInit+0x48>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_TIM_PWM_MspInit+0x48>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	201d      	movs	r0, #29
 8000668:	f000 fa47 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800066c:	201d      	movs	r0, #29
 800066e:	f000 fa60 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40000400 	.word	0x40000400
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <HAL_TIM_MspPostInit+0x58>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d117      	bne.n	80006d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_TIM_MspPostInit+0x5c>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <HAL_TIM_MspPostInit+0x5c>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <HAL_TIM_MspPostInit+0x5c>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <HAL_TIM_MspPostInit+0x60>)
 80006d0:	f000 fa4a 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40000400 	.word	0x40000400
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072e:	f000 f8f1 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}

08000736 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <TIM3_IRQHandler+0x10>)
 800074a:	f001 f9ad 	bl	8001aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000078 	.word	0x20000078

08000758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800075c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000760:	f000 fbb6 	bl	8000ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000764:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000768:	f000 fbb2 	bl	8000ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800076c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000770:	f000 fbae 	bl	8000ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000774:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000778:	f000 fbaa 	bl	8000ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return 1;
 8000784:	2301      	movs	r3, #1
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <_kill>:

int _kill(int pid, int sig)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000798:	f002 f99a 	bl	8002ad0 <__errno>
 800079c:	4603      	mov	r3, r0
 800079e:	2216      	movs	r2, #22
 80007a0:	601a      	str	r2, [r3, #0]
  return -1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_exit>:

void _exit (int status)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007b6:	f04f 31ff 	mov.w	r1, #4294967295
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffe7 	bl	800078e <_kill>
  while (1) {}    /* Make sure we hang here */
 80007c0:	e7fe      	b.n	80007c0 <_exit+0x12>
	...

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f002 f96c 	bl	8002ad0 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	200000c4 	.word	0x200000c4
 800082c:	20000218 	.word	0x20000218

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff fff8 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000842:	490c      	ldr	r1, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000858:	4c09      	ldr	r4, [pc, #36]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 f939 	bl	8002adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fc89 	bl	8000180 <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000878:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 800087c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000880:	20000218 	.word	0x20000218

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f923 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fe8e 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f93b 	bl	8000b4e <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f903 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	200000c8 	.word	0x200000c8

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	200000c8 	.word	0x200000c8

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff2d 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff42 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff35 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e169      	b.n	8000e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 8158 	bne.w	8000e4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a9a      	ldr	r2, [pc, #616]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d05e      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a98      	ldr	r2, [pc, #608]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d875      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000baa:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d058      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bb0:	4a96      	ldr	r2, [pc, #600]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d86f      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bb6:	4a96      	ldr	r2, [pc, #600]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d052      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bbc:	4a94      	ldr	r2, [pc, #592]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d869      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bc2:	4a94      	ldr	r2, [pc, #592]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d04c      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a92      	ldr	r2, [pc, #584]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d863      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bce:	4a92      	ldr	r2, [pc, #584]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d046      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a90      	ldr	r2, [pc, #576]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d85d      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d82a      	bhi.n	8000c34 <HAL_GPIO_Init+0xcc>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d859      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <HAL_GPIO_Init+0x80>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c63 	.word	0x08000c63
 8000bec:	08000c3d 	.word	0x08000c3d
 8000bf0:	08000c4f 	.word	0x08000c4f
 8000bf4:	08000c91 	.word	0x08000c91
 8000bf8:	08000c97 	.word	0x08000c97
 8000bfc:	08000c97 	.word	0x08000c97
 8000c00:	08000c97 	.word	0x08000c97
 8000c04:	08000c97 	.word	0x08000c97
 8000c08:	08000c97 	.word	0x08000c97
 8000c0c:	08000c97 	.word	0x08000c97
 8000c10:	08000c97 	.word	0x08000c97
 8000c14:	08000c97 	.word	0x08000c97
 8000c18:	08000c97 	.word	0x08000c97
 8000c1c:	08000c97 	.word	0x08000c97
 8000c20:	08000c97 	.word	0x08000c97
 8000c24:	08000c97 	.word	0x08000c97
 8000c28:	08000c97 	.word	0x08000c97
 8000c2c:	08000c45 	.word	0x08000c45
 8000c30:	08000c59 	.word	0x08000c59
 8000c34:	4a79      	ldr	r2, [pc, #484]	; (8000e1c <HAL_GPIO_Init+0x2b4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d013      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3a:	e02c      	b.n	8000c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e029      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e024      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	3308      	adds	r3, #8
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e01f      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	330c      	adds	r3, #12
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e01a      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e013      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d105      	bne.n	8000c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	611a      	str	r2, [r3, #16]
          break;
 8000c82:	e009      	b.n	8000c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	615a      	str	r2, [r3, #20]
          break;
 8000c8e:	e003      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          break;
 8000c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d801      	bhi.n	8000ca2 <HAL_GPIO_Init+0x13a>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	e001      	b.n	8000ca6 <HAL_GPIO_Init+0x13e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2bff      	cmp	r3, #255	; 0xff
 8000cac:	d802      	bhi.n	8000cb4 <HAL_GPIO_Init+0x14c>
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x152>
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	3b08      	subs	r3, #8
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	210f      	movs	r1, #15
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	6a39      	ldr	r1, [r7, #32]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a4c      	ldr	r2, [pc, #304]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a40      	ldr	r2, [pc, #256]	; (8000e28 <HAL_GPIO_Init+0x2c0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d013      	beq.n	8000d54 <HAL_GPIO_Init+0x1ec>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3f      	ldr	r2, [pc, #252]	; (8000e2c <HAL_GPIO_Init+0x2c4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00d      	beq.n	8000d50 <HAL_GPIO_Init+0x1e8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3e      	ldr	r2, [pc, #248]	; (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d101      	bne.n	8000d48 <HAL_GPIO_Init+0x1e0>
 8000d44:	2303      	movs	r3, #3
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e004      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d54:	2300      	movs	r3, #0
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d66:	492f      	ldr	r1, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	492c      	ldr	r1, [pc, #176]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4928      	ldr	r1, [pc, #160]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	4922      	ldr	r1, [pc, #136]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60cb      	str	r3, [r1, #12]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	491e      	ldr	r1, [pc, #120]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4918      	ldr	r1, [pc, #96]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4914      	ldr	r1, [pc, #80]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d021      	beq.n	8000e3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	490e      	ldr	r1, [pc, #56]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
 8000e04:	e021      	b.n	8000e4a <HAL_GPIO_Init+0x2e2>
 8000e06:	bf00      	nop
 8000e08:	10320000 	.word	0x10320000
 8000e0c:	10310000 	.word	0x10310000
 8000e10:	10220000 	.word	0x10220000
 8000e14:	10210000 	.word	0x10210000
 8000e18:	10120000 	.word	0x10120000
 8000e1c:	10110000 	.word	0x10110000
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40011400 	.word	0x40011400
 8000e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4909      	ldr	r1, [pc, #36]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f47f ae8e 	bne.w	8000b7c <HAL_GPIO_Init+0x14>
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	372c      	adds	r7, #44	; 0x2c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e001      	b.n	8000e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eae:	787b      	ldrb	r3, [r7, #1]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eba:	e003      	b.n	8000ec4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	041a      	lsls	r2, r3, #16
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	611a      	str	r2, [r3, #16]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f92c 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e272      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8087 	beq.w	800102e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f20:	4b92      	ldr	r3, [pc, #584]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d00c      	beq.n	8000f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f2c:	4b8f      	ldr	r3, [pc, #572]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d112      	bne.n	8000f5e <HAL_RCC_OscConfig+0x5e>
 8000f38:	4b8c      	ldr	r3, [pc, #560]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d10b      	bne.n	8000f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f46:	4b89      	ldr	r3, [pc, #548]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d06c      	beq.n	800102c <HAL_RCC_OscConfig+0x12c>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d168      	bne.n	800102c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e24c      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f66:	d106      	bne.n	8000f76 <HAL_RCC_OscConfig+0x76>
 8000f68:	4b80      	ldr	r3, [pc, #512]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a7f      	ldr	r2, [pc, #508]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e02e      	b.n	8000fd4 <HAL_RCC_OscConfig+0xd4>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x98>
 8000f7e:	4b7b      	ldr	r3, [pc, #492]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7a      	ldr	r2, [pc, #488]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b78      	ldr	r3, [pc, #480]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a77      	ldr	r2, [pc, #476]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e01d      	b.n	8000fd4 <HAL_RCC_OscConfig+0xd4>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0xbc>
 8000fa2:	4b72      	ldr	r3, [pc, #456]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a71      	ldr	r2, [pc, #452]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b6f      	ldr	r3, [pc, #444]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a6e      	ldr	r2, [pc, #440]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e00b      	b.n	8000fd4 <HAL_RCC_OscConfig+0xd4>
 8000fbc:	4b6b      	ldr	r3, [pc, #428]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a6a      	ldr	r2, [pc, #424]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b68      	ldr	r3, [pc, #416]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a67      	ldr	r2, [pc, #412]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fcac 	bl	8000938 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fca8 	bl	8000938 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e200      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0xe4>
 8001002:	e014      	b.n	800102e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fc98 	bl	8000938 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fc94 	bl	8000938 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e1ec      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x10c>
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d063      	beq.n	8001102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103a:	4b4c      	ldr	r3, [pc, #304]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00b      	beq.n	800105e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001046:	4b49      	ldr	r3, [pc, #292]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b08      	cmp	r3, #8
 8001050:	d11c      	bne.n	800108c <HAL_RCC_OscConfig+0x18c>
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d116      	bne.n	800108c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105e:	4b43      	ldr	r3, [pc, #268]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <HAL_RCC_OscConfig+0x176>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d001      	beq.n	8001076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e1c0      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4939      	ldr	r1, [pc, #228]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	e03a      	b.n	8001102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d020      	beq.n	80010d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001094:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_RCC_OscConfig+0x270>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fc4d 	bl	8000938 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fc49 	bl	8000938 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e1a1      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4927      	ldr	r1, [pc, #156]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
 80010d4:	e015      	b.n	8001102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x270>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fc2c 	bl	8000938 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc28 	bl	8000938 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e180      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d03a      	beq.n	8001184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d019      	beq.n	800114a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_RCC_OscConfig+0x274>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111c:	f7ff fc0c 	bl	8000938 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff fc08 	bl	8000938 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e160      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_RCC_OscConfig+0x26c>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f000 fa9c 	bl	8001680 <RCC_Delay>
 8001148:	e01c      	b.n	8001184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_RCC_OscConfig+0x274>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001150:	f7ff fbf2 	bl	8000938 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001156:	e00f      	b.n	8001178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fbee 	bl	8000938 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d908      	bls.n	8001178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e146      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	42420000 	.word	0x42420000
 8001174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001178:	4b92      	ldr	r3, [pc, #584]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1e9      	bne.n	8001158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a6 	beq.w	80012de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001196:	4b8b      	ldr	r3, [pc, #556]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10d      	bne.n	80011be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a87      	ldr	r2, [pc, #540]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b85      	ldr	r3, [pc, #532]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	4b82      	ldr	r3, [pc, #520]	; (80013c8 <HAL_RCC_OscConfig+0x4c8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d118      	bne.n	80011fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x4c8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7e      	ldr	r2, [pc, #504]	; (80013c8 <HAL_RCC_OscConfig+0x4c8>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fbaf 	bl	8000938 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011de:	f7ff fbab 	bl	8000938 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b64      	cmp	r3, #100	; 0x64
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e103      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x4c8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d106      	bne.n	8001212 <HAL_RCC_OscConfig+0x312>
 8001204:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	e02d      	b.n	800126e <HAL_RCC_OscConfig+0x36e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x334>
 800121a:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a69      	ldr	r2, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	6213      	str	r3, [r2, #32]
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4a66      	ldr	r2, [pc, #408]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	f023 0304 	bic.w	r3, r3, #4
 8001230:	6213      	str	r3, [r2, #32]
 8001232:	e01c      	b.n	800126e <HAL_RCC_OscConfig+0x36e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b05      	cmp	r3, #5
 800123a:	d10c      	bne.n	8001256 <HAL_RCC_OscConfig+0x356>
 800123c:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a60      	ldr	r2, [pc, #384]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6213      	str	r3, [r2, #32]
 8001248:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4a5d      	ldr	r2, [pc, #372]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6213      	str	r3, [r2, #32]
 8001254:	e00b      	b.n	800126e <HAL_RCC_OscConfig+0x36e>
 8001256:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a5a      	ldr	r2, [pc, #360]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a57      	ldr	r2, [pc, #348]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d015      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fb5f 	bl	8000938 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fb5b 	bl	8000938 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0b1      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0ee      	beq.n	800127e <HAL_RCC_OscConfig+0x37e>
 80012a0:	e014      	b.n	80012cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fb49 	bl	8000938 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f7ff fb45 	bl	8000938 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e09b      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ee      	bne.n	80012aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d105      	bne.n	80012de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a3b      	ldr	r2, [pc, #236]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8087 	beq.w	80013f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d061      	beq.n	80013b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d146      	bne.n	800138a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x4cc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb19 	bl	8000938 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fb15 	bl	8000938 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e06d      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d108      	bne.n	8001344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4921      	ldr	r1, [pc, #132]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a19      	ldr	r1, [r3, #32]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	430b      	orrs	r3, r1
 8001356:	491b      	ldr	r1, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x4cc>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fae9 	bl	8000938 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136a:	f7ff fae5 	bl	8000938 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e03d      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x46a>
 8001388:	e035      	b.n	80013f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_OscConfig+0x4cc>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fad2 	bl	8000938 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff face 	bl	8000938 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e026      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x498>
 80013b6:	e01e      	b.n	80013f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d107      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e019      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40007000 	.word	0x40007000
 80013cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_RCC_OscConfig+0x500>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0d0      	b.n	80015ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001418:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d910      	bls.n	8001448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001426:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 0207 	bic.w	r2, r3, #7
 800142e:	4965      	ldr	r1, [pc, #404]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001436:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0b8      	b.n	80015ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800146a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001478:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001484:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	494d      	ldr	r1, [pc, #308]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d040      	beq.n	8001524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d115      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e07f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e073      	b.n	80015ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e06b      	b.n	80015ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f023 0203 	bic.w	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4936      	ldr	r1, [pc, #216]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f4:	f7ff fa20 	bl	8000938 <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fc:	f7ff fa1c 	bl	8000938 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e053      	b.n	80015ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 020c 	and.w	r2, r3, #12
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	429a      	cmp	r2, r3
 8001522:	d1eb      	bne.n	80014fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d210      	bcs.n	8001554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 0207 	bic.w	r2, r3, #7
 800153a:	4922      	ldr	r1, [pc, #136]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e032      	b.n	80015ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4916      	ldr	r1, [pc, #88]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	490e      	ldr	r1, [pc, #56]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001592:	f000 f821 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 8001596:	4602      	mov	r2, r0
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	490a      	ldr	r1, [pc, #40]	; (80015cc <HAL_RCC_ClockConfig+0x1c8>)
 80015a4:	5ccb      	ldrb	r3, [r1, r3]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1cc>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1d0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f97e 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40022000 	.word	0x40022000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	08002b40 	.word	0x08002b40
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_RCC_GetSysClockFreq+0x94>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d002      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x30>
 8001602:	2b08      	cmp	r3, #8
 8001604:	d003      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x36>
 8001606:	e027      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_GetSysClockFreq+0x98>)
 800160a:	613b      	str	r3, [r7, #16]
      break;
 800160c:	e027      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d010      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_RCC_GetSysClockFreq+0x94>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	0c5b      	lsrs	r3, r3, #17
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_RCC_GetSysClockFreq+0x98>)
 800163a:	fb03 f202 	mul.w	r2, r3, r2
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	fbb2 f3f3 	udiv	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e004      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <HAL_RCC_GetSysClockFreq+0xa4>)
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	613b      	str	r3, [r7, #16]
      break;
 8001656:	e002      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_RCC_GetSysClockFreq+0x98>)
 800165a:	613b      	str	r3, [r7, #16]
      break;
 800165c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165e:	693b      	ldr	r3, [r7, #16]
}
 8001660:	4618      	mov	r0, r3
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	007a1200 	.word	0x007a1200
 8001674:	08002b50 	.word	0x08002b50
 8001678:	08002b60 	.word	0x08002b60
 800167c:	003d0900 	.word	0x003d0900

08001680 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <RCC_Delay+0x34>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <RCC_Delay+0x38>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0a5b      	lsrs	r3, r3, #9
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800169c:	bf00      	nop
  }
  while (Delay --);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	60fa      	str	r2, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f9      	bne.n	800169c <RCC_Delay+0x1c>
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000000 	.word	0x20000000
 80016b8:	10624dd3 	.word	0x10624dd3

080016bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d001      	beq.n	80016d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e03a      	b.n	800174a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_TIM_Base_Start_IT+0x98>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00e      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0x58>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016fe:	d009      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0x58>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_TIM_Base_Start_IT+0x9c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d004      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0x58>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_TIM_Base_Start_IT+0xa0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d111      	bne.n	8001738 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b06      	cmp	r3, #6
 8001724:	d010      	beq.n	8001748 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001736:	e007      	b.n	8001748 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40012c00 	.word	0x40012c00
 8001758:	40000400 	.word	0x40000400
 800175c:	40000800 	.word	0x40000800

08001760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e041      	b.n	80017f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe ff56 	bl	8000638 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3304      	adds	r3, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 fb70 	bl	8001e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fd20 	bl	8002258 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <HAL_TIM_PWM_Stop+0xc4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d117      	bne.n	8001852 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	f241 1311 	movw	r3, #4369	; 0x1111
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_TIM_PWM_Stop+0x52>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	f240 4344 	movw	r3, #1092	; 0x444
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d107      	bne.n	8001852 <HAL_TIM_PWM_Stop+0x52>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	f241 1311 	movw	r3, #4369	; 0x1111
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_TIM_PWM_Stop+0x82>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	f240 4344 	movw	r3, #1092	; 0x444
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d107      	bne.n	8001882 <HAL_TIM_PWM_Stop+0x82>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d104      	bne.n	8001892 <HAL_TIM_PWM_Stop+0x92>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001890:	e013      	b.n	80018ba <HAL_TIM_PWM_Stop+0xba>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d104      	bne.n	80018a2 <HAL_TIM_PWM_Stop+0xa2>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018a0:	e00b      	b.n	80018ba <HAL_TIM_PWM_Stop+0xba>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d104      	bne.n	80018b2 <HAL_TIM_PWM_Stop+0xb2>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018b0:	e003      	b.n	80018ba <HAL_TIM_PWM_Stop+0xba>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40012c00 	.word	0x40012c00

080018c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_TIM_PWM_Start_IT+0x28>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e022      	b.n	8001936 <HAL_TIM_PWM_Start_IT+0x6e>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d109      	bne.n	800190a <HAL_TIM_PWM_Start_IT+0x42>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	e015      	b.n	8001936 <HAL_TIM_PWM_Start_IT+0x6e>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d109      	bne.n	8001924 <HAL_TIM_PWM_Start_IT+0x5c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e008      	b.n	8001936 <HAL_TIM_PWM_Start_IT+0x6e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0a9      	b.n	8001a92 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_TIM_PWM_Start_IT+0x86>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800194c:	e013      	b.n	8001976 <HAL_TIM_PWM_Start_IT+0xae>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d104      	bne.n	800195e <HAL_TIM_PWM_Start_IT+0x96>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800195c:	e00b      	b.n	8001976 <HAL_TIM_PWM_Start_IT+0xae>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d104      	bne.n	800196e <HAL_TIM_PWM_Start_IT+0xa6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800196c:	e003      	b.n	8001976 <HAL_TIM_PWM_Start_IT+0xae>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b0c      	cmp	r3, #12
 800197a:	d841      	bhi.n	8001a00 <HAL_TIM_PWM_Start_IT+0x138>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <HAL_TIM_PWM_Start_IT+0xbc>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	080019b9 	.word	0x080019b9
 8001988:	08001a01 	.word	0x08001a01
 800198c:	08001a01 	.word	0x08001a01
 8001990:	08001a01 	.word	0x08001a01
 8001994:	080019cb 	.word	0x080019cb
 8001998:	08001a01 	.word	0x08001a01
 800199c:	08001a01 	.word	0x08001a01
 80019a0:	08001a01 	.word	0x08001a01
 80019a4:	080019dd 	.word	0x080019dd
 80019a8:	08001a01 	.word	0x08001a01
 80019ac:	08001a01 	.word	0x08001a01
 80019b0:	08001a01 	.word	0x08001a01
 80019b4:	080019ef 	.word	0x080019ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0202 	orr.w	r2, r2, #2
 80019c6:	60da      	str	r2, [r3, #12]
      break;
 80019c8:	e01d      	b.n	8001a06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0204 	orr.w	r2, r2, #4
 80019d8:	60da      	str	r2, [r3, #12]
      break;
 80019da:	e014      	b.n	8001a06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0208 	orr.w	r2, r2, #8
 80019ea:	60da      	str	r2, [r3, #12]
      break;
 80019ec:	e00b      	b.n	8001a06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0210 	orr.w	r2, r2, #16
 80019fc:	60da      	str	r2, [r3, #12]
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      break;
 8001a04:	bf00      	nop
  }

  if (status == HAL_OK)
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d141      	bne.n	8001a90 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fc1f 	bl	8002258 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d107      	bne.n	8001a34 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00e      	beq.n	8001a5c <HAL_TIM_PWM_Start_IT+0x194>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a46:	d009      	beq.n	8001a5c <HAL_TIM_PWM_Start_IT+0x194>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d004      	beq.n	8001a5c <HAL_TIM_PWM_Start_IT+0x194>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d111      	bne.n	8001a80 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d010      	beq.n	8001a90 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7e:	e007      	b.n	8001a90 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40000800 	.word	0x40000800

08001aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0202 	mvn.w	r2, #2
 8001ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f9af 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f9a2 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f9b1 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0204 	mvn.w	r2, #4
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f985 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f978 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f987 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d122      	bne.n	8001bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d11b      	bne.n	8001bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0208 	mvn.w	r2, #8
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2204      	movs	r2, #4
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f95b 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f94e 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f95d 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d122      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d11b      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0210 	mvn.w	r2, #16
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f931 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f924 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f933 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0201 	mvn.w	r2, #1
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fa9a 	bl	8000160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	2b80      	cmp	r3, #128	; 0x80
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	2b80      	cmp	r3, #128	; 0x80
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fb8b 	bl	800236e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c62:	2b40      	cmp	r3, #64	; 0x40
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c70:	2b40      	cmp	r3, #64	; 0x40
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8f7 	bl	8001e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d107      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0220 	mvn.w	r2, #32
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fb56 	bl	800235c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0ae      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	f200 809f 	bhi.w	8001e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ce6:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d21 	.word	0x08001d21
 8001cf0:	08001e25 	.word	0x08001e25
 8001cf4:	08001e25 	.word	0x08001e25
 8001cf8:	08001e25 	.word	0x08001e25
 8001cfc:	08001d61 	.word	0x08001d61
 8001d00:	08001e25 	.word	0x08001e25
 8001d04:	08001e25 	.word	0x08001e25
 8001d08:	08001e25 	.word	0x08001e25
 8001d0c:	08001da3 	.word	0x08001da3
 8001d10:	08001e25 	.word	0x08001e25
 8001d14:	08001e25 	.word	0x08001e25
 8001d18:	08001e25 	.word	0x08001e25
 8001d1c:	08001de3 	.word	0x08001de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f90e 	bl	8001f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0208 	orr.w	r2, r2, #8
 8001d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0204 	bic.w	r2, r2, #4
 8001d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6999      	ldr	r1, [r3, #24]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	619a      	str	r2, [r3, #24]
      break;
 8001d5e:	e064      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f954 	bl	8002014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6999      	ldr	r1, [r3, #24]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	021a      	lsls	r2, r3, #8
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	619a      	str	r2, [r3, #24]
      break;
 8001da0:	e043      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f99d 	bl	80020e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0208 	orr.w	r2, r2, #8
 8001dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0204 	bic.w	r2, r2, #4
 8001dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69d9      	ldr	r1, [r3, #28]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	61da      	str	r2, [r3, #28]
      break;
 8001de0:	e023      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f9e7 	bl	80021bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69d9      	ldr	r1, [r3, #28]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	021a      	lsls	r2, r3, #8
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	61da      	str	r2, [r3, #28]
      break;
 8001e22:	e002      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
      break;
 8001e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <TIM_Base_SetConfig+0xb8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <TIM_Base_SetConfig+0x30>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea2:	d007      	beq.n	8001eb4 <TIM_Base_SetConfig+0x30>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <TIM_Base_SetConfig+0xbc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <TIM_Base_SetConfig+0x30>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <TIM_Base_SetConfig+0xc0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d108      	bne.n	8001ec6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <TIM_Base_SetConfig+0xb8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00b      	beq.n	8001ee6 <TIM_Base_SetConfig+0x62>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d007      	beq.n	8001ee6 <TIM_Base_SetConfig+0x62>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <TIM_Base_SetConfig+0xbc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <TIM_Base_SetConfig+0x62>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <TIM_Base_SetConfig+0xc0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <TIM_Base_SetConfig+0xb8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d103      	bne.n	8001f2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	615a      	str	r2, [r3, #20]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800

08001f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 0201 	bic.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f023 0302 	bic.w	r3, r3, #2
 8001f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <TIM_OC1_SetConfig+0xc8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d10c      	bne.n	8001fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0308 	bic.w	r3, r3, #8
 8001faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a13      	ldr	r2, [pc, #76]	; (8002010 <TIM_OC1_SetConfig+0xc8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d111      	bne.n	8001fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	621a      	str	r2, [r3, #32]
}
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00

08002014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 0210 	bic.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f023 0320 	bic.w	r3, r3, #32
 800205e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <TIM_OC2_SetConfig+0xd0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10d      	bne.n	8002090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800207a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800208e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <TIM_OC2_SetConfig+0xd0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d113      	bne.n	80020c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800209e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	621a      	str	r2, [r3, #32]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <TIM_OC3_SetConfig+0xd0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10d      	bne.n	8002162 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800214c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <TIM_OC3_SetConfig+0xd0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d113      	bne.n	8002192 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	621a      	str	r2, [r3, #32]
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40012c00 	.word	0x40012c00

080021bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	031b      	lsls	r3, r3, #12
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <TIM_OC4_SetConfig+0x98>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d109      	bne.n	8002230 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	621a      	str	r2, [r3, #32]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40012c00 	.word	0x40012c00

08002258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	621a      	str	r2, [r3, #32]
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e046      	b.n	8002346 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00e      	beq.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d009      	beq.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d004      	beq.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10c      	bne.n	8002334 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4313      	orrs	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800

0800235c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <_ZN8DebounceC1EP12GPIO_TypeDeftm>:
 *      Author: Dom
 */

#include "Debounce.h"

Debounce::Debounce(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,  uint32_t timeDelay)
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	80fb      	strh	r3, [r7, #6]
{
	// TODO Auto-generated constructor stub
	m_pGPIOx = GPIOx;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	601a      	str	r2, [r3, #0]
	m_timeDelay = timeDelay;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]
	m_GPIO_Pin = GPIO_Pin;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	811a      	strh	r2, [r3, #8]
	m_timeOutFromPressed = 0;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]

	 m_flag_key_press = 1;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	741a      	strb	r2, [r3, #16]
	 m_time_key_press = 0;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
}
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <_ZN8Debounce11CheckButtonEv>:

bool Debounce:: CheckButton()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	if(HAL_GPIO_ReadPin(m_pGPIOx, m_GPIO_Pin) == GPIO_PIN_SET && m_flag_key_press) // записываем время нажатия
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	891b      	ldrh	r3, [r3, #8]
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f7fe fd4c 	bl	8000e70 <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <_ZN8Debounce11CheckButtonEv+0x2a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7c1b      	ldrb	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <_ZN8Debounce11CheckButtonEv+0x2a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <_ZN8Debounce11CheckButtonEv+0x2c>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <_ZN8Debounce11CheckButtonEv+0x42>
	{
	m_flag_key_press = 0;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	741a      	strb	r2, [r3, #16]
	m_time_key_press = HAL_GetTick();
 80023f6:	f7fe fa9f 	bl	8000938 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	615a      	str	r2, [r3, #20]
 8002400:	e035      	b.n	800246e <_ZN8Debounce11CheckButtonEv+0xae>
	}
	else if (HAL_GPIO_ReadPin(m_pGPIOx, m_GPIO_Pin) == GPIO_PIN_SET && !m_flag_key_press)	// если кнопка всё ещё нажата но флаг уже не 1 (проверяем не первый раз)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	891b      	ldrh	r3, [r3, #8]
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f7fe fd2f 	bl	8000e70 <HAL_GPIO_ReadPin>
 8002412:	4603      	mov	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <_ZN8Debounce11CheckButtonEv+0x64>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7c1b      	ldrb	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <_ZN8Debounce11CheckButtonEv+0x64>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <_ZN8Debounce11CheckButtonEv+0x66>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <_ZN8Debounce11CheckButtonEv+0x7c>
		{
		m_timeOutFromPressed = HAL_GetTick() - m_time_key_press;						// суммируем время которое конопка нажата
 800242a:	f7fe fa85 	bl	8000938 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	e018      	b.n	800246e <_ZN8Debounce11CheckButtonEv+0xae>
	}
	else if (HAL_GPIO_ReadPin(m_pGPIOx, m_GPIO_Pin) == GPIO_PIN_RESET)					// если кнопка сброшена то всё по дефолту, суть в том что если хоть раз проскочил низкий уровень то считатем заново
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	891b      	ldrh	r3, [r3, #8]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f7fe fd12 	bl	8000e70 <HAL_GPIO_ReadPin>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <_ZN8Debounce11CheckButtonEv+0xae>
		{
		m_timeOutFromPressed = 0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]

		 m_flag_key_press = 1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	741a      	strb	r2, [r3, #16]
		 m_time_key_press = 0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	615a      	str	r2, [r3, #20]
	}

	if(checkDelayPress())
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f80a 	bl	8002488 <_ZN8Debounce15checkDelayPressEv>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <_ZN8Debounce11CheckButtonEv+0xbe>
	{
		return 1;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <_ZN8Debounce11CheckButtonEv+0xc0>
	}

return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZN8Debounce15checkDelayPressEv>:

bool Debounce:: checkDelayPress()
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
if(m_timeOutFromPressed >  m_timeDelay)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d904      	bls.n	80024a6 <_ZN8Debounce15checkDelayPressEv+0x1e>
{
	m_flag_key_press = 0;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	741a      	strb	r2, [r3, #16]
	return 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <_ZN8Debounce15checkDelayPressEv+0x20>
}

else
	return 0;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <_ZN9StepMotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
#include "StepMotor.h"


	StepMotor::StepMotor(GPIO_TypeDef *GPIOx_Enable, uint16_t pin_Enable,GPIO_TypeDef *GPIOx_Dir,
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
			uint16_t pin_Dir, TIM_HandleTypeDef *htim_PWM, uint32_t Channel)
	{

		htim_PWM-> Instance->CR1 |=  TIM_CR1_ARPE;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d0:	601a      	str	r2, [r3, #0]

		//---------------------------
		// pinout
		m_GPIOx_Enable = GPIOx_Enable;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	605a      	str	r2, [r3, #4]
		m_GPIOx_Dir = GPIOx_Dir;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	609a      	str	r2, [r3, #8]
		p_htim_PWM = htim_PWM;			// pointer to taimer
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	619a      	str	r2, [r3, #24]
		m_Channel = Channel;			// chanel taimer
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a3a      	ldr	r2, [r7, #32]
 80024e8:	61da      	str	r2, [r3, #28]
		m_pin_enable = pin_Enable;		// pin enable
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	821a      	strh	r2, [r3, #16]
		m_pin_Dir = pin_Dir;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8b3a      	ldrh	r2, [r7, #24]
 80024f4:	825a      	strh	r2, [r3, #18]

		//---------------------------
		m_speed = 0;					// now speed
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
		m_MaxSpeed = 0;					// max speed
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
		m_MinSpeed = 0;					// min speed
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
		//---------------------------
		m_direction = 0;				// direction 1 - left, 0 - right
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2020 	strb.w	r2, [r3, #32]
		m_counterSteps = 0;				// counter steps
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
		m_nStepsForMotion = 0;			// all steps
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
		//---------------------------
		m_Retention = 0;				// retention
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		//---------------------------
		typeMotion = NO_MOTION;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		//---------------------------
		m_AccelerationStep = 0;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
		m_stepEndAcceleration = 0;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	63da      	str	r2, [r3, #60]	; 0x3c
		m_brakeSteps = 0;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
		m_stepsStartBrake = 0;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	645a      	str	r2, [r3, #68]	; 0x44

		htim_PWM-> Instance->CR1 |=  TIM_CR1_ARPE;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002552:	601a      	str	r2, [r3, #0]

	}
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <_ZN9StepMotor12motorServiceEv>:

	void StepMotor::motorService()		//вызывается в коллбэке
	{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_GPIOx_Enable, m_pin_enable, GPIO_PIN_RESET);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6858      	ldr	r0, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8a1b      	ldrh	r3, [r3, #16]
 8002570:	2200      	movs	r2, #0
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fc93 	bl	8000e9e <HAL_GPIO_WritePin>

		if(m_direction)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <_ZN9StepMotor12motorServiceEv+0x34>
		{
			HAL_GPIO_WritePin(m_GPIOx_Dir, m_pin_Dir, GPIO_PIN_SET);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6898      	ldr	r0, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8a5b      	ldrh	r3, [r3, #18]
 800258a:	2201      	movs	r2, #1
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe fc86 	bl	8000e9e <HAL_GPIO_WritePin>
 8002592:	e00f      	b.n	80025b4 <_ZN9StepMotor12motorServiceEv+0x54>
		}
		else if(!m_direction)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259a:	f083 0301 	eor.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <_ZN9StepMotor12motorServiceEv+0x54>
		{
			HAL_GPIO_WritePin(m_GPIOx_Dir, m_pin_Dir, GPIO_PIN_RESET);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6898      	ldr	r0, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8a5b      	ldrh	r3, [r3, #18]
 80025ac:	2200      	movs	r2, #0
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fc75 	bl	8000e9e <HAL_GPIO_WritePin>
		}

		if(m_counterSteps < m_nStepsForMotion)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	429a      	cmp	r2, r3
 80025be:	d211      	bcs.n	80025e4 <_ZN9StepMotor12motorServiceEv+0x84>
		{
			accelerationService(m_counterSteps);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8f2 	bl	80027b0 <_ZN9StepMotor19accelerationServiceEm>
			brakeService(m_counterSteps);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f91c 	bl	8002810 <_ZN9StepMotor12brakeServiceEm>
			m_counterSteps++;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	601a      	str	r2, [r3, #0]
			typeMotion = NO_MOTION;
			m_counterSteps = 0;
			HAL_TIM_PWM_Stop(p_htim_PWM, m_Channel); 				// остановить шим
			setRetention(m_Retention);
		}
	}
 80025e2:	e018      	b.n	8002616 <_ZN9StepMotor12motorServiceEv+0xb6>
			m_speed = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38
			typeMotion = NO_MOTION;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			m_counterSteps = 0;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(p_htim_PWM, m_Channel); 				// остановить шим
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f7ff f8fc 	bl	8001800 <HAL_TIM_PWM_Stop>
			setRetention(m_Retention);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f85e 	bl	80026d2 <_ZN9StepMotor12setRetentionEb>
	}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_ZN9StepMotor20checkMotorInCallbackEP17TIM_HandleTypeDef>:

	void StepMotor::checkMotorInCallback(TIM_HandleTypeDef *htim)
	{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
		if(htim == this->p_htim_PWM)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d102      	bne.n	8002638 <_ZN9StepMotor20checkMotorInCallbackEP17TIM_HandleTypeDef+0x1a>
			{
				motorService();
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff94 	bl	8002560 <_ZN9StepMotor12motorServiceEv>
			}
	}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_ZN9StepMotor12setDirectionEh>:

	void StepMotor::setDirection(uint8_t in_direction)
	{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
		m_direction = in_direction;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2da      	uxtb	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f883 2020 	strb.w	r2, [r3, #32]
	}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <_ZN9StepMotor11startMotionEm>:
	{
		return m_direction;
	}

	void StepMotor::startMotion(uint32_t steps)
	{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
		if(typeMotion == NO_MOTION)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <_ZN9StepMotor11startMotionEm+0x2e>
		{
			typeMotion = ACCELERATION;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			m_nStepsForMotion = steps;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_PWM_Start_IT(p_htim_PWM, TIM_CHANNEL_1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff f919 	bl	80018c8 <HAL_TIM_PWM_Start_IT>
		}
	}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZN9StepMotor11setMaxSpeedEm>:
	{
		HAL_TIM_PWM_Stop_IT(p_htim_PWM, TIM_CHANNEL_1);
	}

	void StepMotor::setMaxSpeed(uint32_t maxSpeed)
	{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
		m_MaxSpeed = maxSpeed;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
	}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <_ZN9StepMotor11setMinSpeedEm>:
		return m_MaxSpeed;
	}


	void StepMotor::setMinSpeed(uint32_t speed)
	{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
		m_MinSpeed = speed;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <_ZN9StepMotor12setRetentionEb>:
	{
		return m_MinSpeed;
	}

	void StepMotor::setRetention(bool Retention)
	{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	70fb      	strb	r3, [r7, #3]
		m_Retention = Retention;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		if(m_Retention)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <_ZN9StepMotor12setRetentionEb+0x30>
			HAL_GPIO_WritePin(m_GPIOx_Enable, m_pin_enable, GPIO_PIN_RESET);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6858      	ldr	r0, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8a1b      	ldrh	r3, [r3, #16]
 80026f8:	2200      	movs	r2, #0
 80026fa:	4619      	mov	r1, r3
 80026fc:	f7fe fbcf 	bl	8000e9e <HAL_GPIO_WritePin>
		else if(!m_Retention)
			HAL_GPIO_WritePin(m_GPIOx_Enable, m_pin_enable, GPIO_PIN_SET);
	}
 8002700:	e00f      	b.n	8002722 <_ZN9StepMotor12setRetentionEb+0x50>
		else if(!m_Retention)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <_ZN9StepMotor12setRetentionEb+0x50>
			HAL_GPIO_WritePin(m_GPIOx_Enable, m_pin_enable, GPIO_PIN_SET);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6858      	ldr	r0, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8a1b      	ldrh	r3, [r3, #16]
 800271a:	2201      	movs	r2, #1
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe fbbe 	bl	8000e9e <HAL_GPIO_WritePin>
	}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_ZN9StepMotor8setSpeedEm>:

	void StepMotor::setSpeed(uint32_t speed)
	{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
		if(m_speed <= m_MaxSpeed)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	429a      	cmp	r2, r3
 800273e:	d81e      	bhi.n	800277e <_ZN9StepMotor8setSpeedEm+0x54>
		{
			m_speed = speed;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
			int arr = HAL_RCC_GetSysClockFreq() / (speed * p_htim_PWM->Instance->ARR);
 8002746:	f7fe ff47 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 800274a:	4601      	mov	r1, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	fbb1 f3f3 	udiv	r3, r1, r3
 800275e:	60fb      	str	r3, [r7, #12]
			p_htim_PWM -> Instance -> ARR = arr - 1;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
			p_htim_PWM -> Instance -> CCR1 = arr / 2;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	0fda      	lsrs	r2, r3, #31
 8002770:	4413      	add	r3, r2
 8002772:	105b      	asrs	r3, r3, #1
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
		}

	}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <_ZN9StepMotor19setAccelerationStepEmm>:

	void StepMotor::setAccelerationStep(uint32_t steps, uint32_t stepEndAcceleration)		// до какого шага увеличение частоты
	{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
		m_AccelerationStep = m_MaxSpeed / steps;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	fbb2 f2f3 	udiv	r2, r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
		m_stepEndAcceleration = stepEndAcceleration;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <_ZN9StepMotor19accelerationServiceEm>:

	void StepMotor::accelerationService(uint32_t i)
	{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
		if (i == 0 || i > m_stepEndAcceleration)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <_ZN9StepMotor19accelerationServiceEm+0x58>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d81e      	bhi.n	8002808 <_ZN9StepMotor19accelerationServiceEm+0x58>
			return;
		if (i == m_stepEndAcceleration)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d105      	bne.n	80027e0 <_ZN9StepMotor19accelerationServiceEm+0x30>
			setSpeed(m_MaxSpeed);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffa5 	bl	800272a <_ZN9StepMotor8setSpeedEm>

		if(i % m_AccelerationStep == 0)	//
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80027ea:	fb01 f202 	mul.w	r2, r1, r2
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <_ZN9StepMotor19accelerationServiceEm+0x5a>
		{
			setSpeed(m_speed + m_AccelerationStep);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	4413      	add	r3, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff92 	bl	800272a <_ZN9StepMotor8setSpeedEm>
 8002806:	e000      	b.n	800280a <_ZN9StepMotor19accelerationServiceEm+0x5a>
			return;
 8002808:	bf00      	nop
		}

	}
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN9StepMotor12brakeServiceEm>:
		m_brakeSteps = m_speed / stepsBrake;
		m_stepsStartBrake = m_nStepsForMotion - stepsForEndBraking;
	}

	void StepMotor::brakeService(uint32_t i)
	{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
		if (i == 0 || i > m_stepsStartBrake)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d021      	beq.n	8002864 <_ZN9StepMotor12brakeServiceEm+0x54>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d81c      	bhi.n	8002864 <_ZN9StepMotor12brakeServiceEm+0x54>
			return;
		if (i == m_stepsStartBrake)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d103      	bne.n	800283c <_ZN9StepMotor12brakeServiceEm+0x2c>
			setSpeed(0);
 8002834:	2100      	movs	r1, #0
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff77 	bl	800272a <_ZN9StepMotor8setSpeedEm>

		if(i % m_brakeSteps == 0)	//
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	fbb3 f1f2 	udiv	r1, r3, r2
 8002846:	fb01 f202 	mul.w	r2, r1, r2
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <_ZN9StepMotor12brakeServiceEm+0x56>
		{
			setSpeed(m_speed - m_brakeSteps);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff64 	bl	800272a <_ZN9StepMotor8setSpeedEm>
 8002862:	e000      	b.n	8002866 <_ZN9StepMotor12brakeServiceEm+0x56>
			return;
 8002864:	bf00      	nop
		}
	}
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_Znwj>:
 800286c:	2801      	cmp	r0, #1
 800286e:	bf38      	it	cc
 8002870:	2001      	movcc	r0, #1
 8002872:	b510      	push	{r4, lr}
 8002874:	4604      	mov	r4, r0
 8002876:	4620      	mov	r0, r4
 8002878:	f000 f81a 	bl	80028b0 <malloc>
 800287c:	b100      	cbz	r0, 8002880 <_Znwj+0x14>
 800287e:	bd10      	pop	{r4, pc}
 8002880:	f000 f806 	bl	8002890 <_ZSt15get_new_handlerv>
 8002884:	b908      	cbnz	r0, 800288a <_Znwj+0x1e>
 8002886:	f000 f80b 	bl	80028a0 <abort>
 800288a:	4780      	blx	r0
 800288c:	e7f3      	b.n	8002876 <_Znwj+0xa>
	...

08002890 <_ZSt15get_new_handlerv>:
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <_ZSt15get_new_handlerv+0xc>)
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	f3bf 8f5b 	dmb	ish
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	200000cc 	.word	0x200000cc

080028a0 <abort>:
 80028a0:	2006      	movs	r0, #6
 80028a2:	b508      	push	{r3, lr}
 80028a4:	f000 f8e8 	bl	8002a78 <raise>
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7fd ff80 	bl	80007ae <_exit>
	...

080028b0 <malloc>:
 80028b0:	4b02      	ldr	r3, [pc, #8]	; (80028bc <malloc+0xc>)
 80028b2:	4601      	mov	r1, r0
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	f000 b823 	b.w	8002900 <_malloc_r>
 80028ba:	bf00      	nop
 80028bc:	20000058 	.word	0x20000058

080028c0 <sbrk_aligned>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	4e0e      	ldr	r6, [pc, #56]	; (80028fc <sbrk_aligned+0x3c>)
 80028c4:	460c      	mov	r4, r1
 80028c6:	6831      	ldr	r1, [r6, #0]
 80028c8:	4605      	mov	r5, r0
 80028ca:	b911      	cbnz	r1, 80028d2 <sbrk_aligned+0x12>
 80028cc:	f000 f8f0 	bl	8002ab0 <_sbrk_r>
 80028d0:	6030      	str	r0, [r6, #0]
 80028d2:	4621      	mov	r1, r4
 80028d4:	4628      	mov	r0, r5
 80028d6:	f000 f8eb 	bl	8002ab0 <_sbrk_r>
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	d00a      	beq.n	80028f4 <sbrk_aligned+0x34>
 80028de:	1cc4      	adds	r4, r0, #3
 80028e0:	f024 0403 	bic.w	r4, r4, #3
 80028e4:	42a0      	cmp	r0, r4
 80028e6:	d007      	beq.n	80028f8 <sbrk_aligned+0x38>
 80028e8:	1a21      	subs	r1, r4, r0
 80028ea:	4628      	mov	r0, r5
 80028ec:	f000 f8e0 	bl	8002ab0 <_sbrk_r>
 80028f0:	3001      	adds	r0, #1
 80028f2:	d101      	bne.n	80028f8 <sbrk_aligned+0x38>
 80028f4:	f04f 34ff 	mov.w	r4, #4294967295
 80028f8:	4620      	mov	r0, r4
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	200000d4 	.word	0x200000d4

08002900 <_malloc_r>:
 8002900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002904:	1ccd      	adds	r5, r1, #3
 8002906:	f025 0503 	bic.w	r5, r5, #3
 800290a:	3508      	adds	r5, #8
 800290c:	2d0c      	cmp	r5, #12
 800290e:	bf38      	it	cc
 8002910:	250c      	movcc	r5, #12
 8002912:	2d00      	cmp	r5, #0
 8002914:	4607      	mov	r7, r0
 8002916:	db01      	blt.n	800291c <_malloc_r+0x1c>
 8002918:	42a9      	cmp	r1, r5
 800291a:	d905      	bls.n	8002928 <_malloc_r+0x28>
 800291c:	230c      	movs	r3, #12
 800291e:	2600      	movs	r6, #0
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4630      	mov	r0, r6
 8002924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002928:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029fc <_malloc_r+0xfc>
 800292c:	f000 f868 	bl	8002a00 <__malloc_lock>
 8002930:	f8d8 3000 	ldr.w	r3, [r8]
 8002934:	461c      	mov	r4, r3
 8002936:	bb5c      	cbnz	r4, 8002990 <_malloc_r+0x90>
 8002938:	4629      	mov	r1, r5
 800293a:	4638      	mov	r0, r7
 800293c:	f7ff ffc0 	bl	80028c0 <sbrk_aligned>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	4604      	mov	r4, r0
 8002944:	d155      	bne.n	80029f2 <_malloc_r+0xf2>
 8002946:	f8d8 4000 	ldr.w	r4, [r8]
 800294a:	4626      	mov	r6, r4
 800294c:	2e00      	cmp	r6, #0
 800294e:	d145      	bne.n	80029dc <_malloc_r+0xdc>
 8002950:	2c00      	cmp	r4, #0
 8002952:	d048      	beq.n	80029e6 <_malloc_r+0xe6>
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	4631      	mov	r1, r6
 8002958:	4638      	mov	r0, r7
 800295a:	eb04 0903 	add.w	r9, r4, r3
 800295e:	f000 f8a7 	bl	8002ab0 <_sbrk_r>
 8002962:	4581      	cmp	r9, r0
 8002964:	d13f      	bne.n	80029e6 <_malloc_r+0xe6>
 8002966:	6821      	ldr	r1, [r4, #0]
 8002968:	4638      	mov	r0, r7
 800296a:	1a6d      	subs	r5, r5, r1
 800296c:	4629      	mov	r1, r5
 800296e:	f7ff ffa7 	bl	80028c0 <sbrk_aligned>
 8002972:	3001      	adds	r0, #1
 8002974:	d037      	beq.n	80029e6 <_malloc_r+0xe6>
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	442b      	add	r3, r5
 800297a:	6023      	str	r3, [r4, #0]
 800297c:	f8d8 3000 	ldr.w	r3, [r8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d038      	beq.n	80029f6 <_malloc_r+0xf6>
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	42a2      	cmp	r2, r4
 8002988:	d12b      	bne.n	80029e2 <_malloc_r+0xe2>
 800298a:	2200      	movs	r2, #0
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	e00f      	b.n	80029b0 <_malloc_r+0xb0>
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	1b52      	subs	r2, r2, r5
 8002994:	d41f      	bmi.n	80029d6 <_malloc_r+0xd6>
 8002996:	2a0b      	cmp	r2, #11
 8002998:	d917      	bls.n	80029ca <_malloc_r+0xca>
 800299a:	1961      	adds	r1, r4, r5
 800299c:	42a3      	cmp	r3, r4
 800299e:	6025      	str	r5, [r4, #0]
 80029a0:	bf18      	it	ne
 80029a2:	6059      	strne	r1, [r3, #4]
 80029a4:	6863      	ldr	r3, [r4, #4]
 80029a6:	bf08      	it	eq
 80029a8:	f8c8 1000 	streq.w	r1, [r8]
 80029ac:	5162      	str	r2, [r4, r5]
 80029ae:	604b      	str	r3, [r1, #4]
 80029b0:	4638      	mov	r0, r7
 80029b2:	f104 060b 	add.w	r6, r4, #11
 80029b6:	f000 f829 	bl	8002a0c <__malloc_unlock>
 80029ba:	f026 0607 	bic.w	r6, r6, #7
 80029be:	1d23      	adds	r3, r4, #4
 80029c0:	1af2      	subs	r2, r6, r3
 80029c2:	d0ae      	beq.n	8002922 <_malloc_r+0x22>
 80029c4:	1b9b      	subs	r3, r3, r6
 80029c6:	50a3      	str	r3, [r4, r2]
 80029c8:	e7ab      	b.n	8002922 <_malloc_r+0x22>
 80029ca:	42a3      	cmp	r3, r4
 80029cc:	6862      	ldr	r2, [r4, #4]
 80029ce:	d1dd      	bne.n	800298c <_malloc_r+0x8c>
 80029d0:	f8c8 2000 	str.w	r2, [r8]
 80029d4:	e7ec      	b.n	80029b0 <_malloc_r+0xb0>
 80029d6:	4623      	mov	r3, r4
 80029d8:	6864      	ldr	r4, [r4, #4]
 80029da:	e7ac      	b.n	8002936 <_malloc_r+0x36>
 80029dc:	4634      	mov	r4, r6
 80029de:	6876      	ldr	r6, [r6, #4]
 80029e0:	e7b4      	b.n	800294c <_malloc_r+0x4c>
 80029e2:	4613      	mov	r3, r2
 80029e4:	e7cc      	b.n	8002980 <_malloc_r+0x80>
 80029e6:	230c      	movs	r3, #12
 80029e8:	4638      	mov	r0, r7
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	f000 f80e 	bl	8002a0c <__malloc_unlock>
 80029f0:	e797      	b.n	8002922 <_malloc_r+0x22>
 80029f2:	6025      	str	r5, [r4, #0]
 80029f4:	e7dc      	b.n	80029b0 <_malloc_r+0xb0>
 80029f6:	605b      	str	r3, [r3, #4]
 80029f8:	deff      	udf	#255	; 0xff
 80029fa:	bf00      	nop
 80029fc:	200000d0 	.word	0x200000d0

08002a00 <__malloc_lock>:
 8002a00:	4801      	ldr	r0, [pc, #4]	; (8002a08 <__malloc_lock+0x8>)
 8002a02:	f000 b88f 	b.w	8002b24 <__retarget_lock_acquire_recursive>
 8002a06:	bf00      	nop
 8002a08:	20000214 	.word	0x20000214

08002a0c <__malloc_unlock>:
 8002a0c:	4801      	ldr	r0, [pc, #4]	; (8002a14 <__malloc_unlock+0x8>)
 8002a0e:	f000 b88a 	b.w	8002b26 <__retarget_lock_release_recursive>
 8002a12:	bf00      	nop
 8002a14:	20000214 	.word	0x20000214

08002a18 <memset>:
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4402      	add	r2, r0
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d100      	bne.n	8002a22 <memset+0xa>
 8002a20:	4770      	bx	lr
 8002a22:	f803 1b01 	strb.w	r1, [r3], #1
 8002a26:	e7f9      	b.n	8002a1c <memset+0x4>

08002a28 <_raise_r>:
 8002a28:	291f      	cmp	r1, #31
 8002a2a:	b538      	push	{r3, r4, r5, lr}
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	460d      	mov	r5, r1
 8002a30:	d904      	bls.n	8002a3c <_raise_r+0x14>
 8002a32:	2316      	movs	r3, #22
 8002a34:	6003      	str	r3, [r0, #0]
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a3e:	b112      	cbz	r2, 8002a46 <_raise_r+0x1e>
 8002a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a44:	b94b      	cbnz	r3, 8002a5a <_raise_r+0x32>
 8002a46:	4620      	mov	r0, r4
 8002a48:	f000 f830 	bl	8002aac <_getpid_r>
 8002a4c:	462a      	mov	r2, r5
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4620      	mov	r0, r4
 8002a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a56:	f000 b817 	b.w	8002a88 <_kill_r>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00a      	beq.n	8002a74 <_raise_r+0x4c>
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	d103      	bne.n	8002a6a <_raise_r+0x42>
 8002a62:	2316      	movs	r3, #22
 8002a64:	6003      	str	r3, [r0, #0]
 8002a66:	2001      	movs	r0, #1
 8002a68:	e7e7      	b.n	8002a3a <_raise_r+0x12>
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002a72:	4798      	blx	r3
 8002a74:	2000      	movs	r0, #0
 8002a76:	e7e0      	b.n	8002a3a <_raise_r+0x12>

08002a78 <raise>:
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <raise+0xc>)
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	f7ff bfd3 	b.w	8002a28 <_raise_r>
 8002a82:	bf00      	nop
 8002a84:	20000058 	.word	0x20000058

08002a88 <_kill_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	4d06      	ldr	r5, [pc, #24]	; (8002aa8 <_kill_r+0x20>)
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	602b      	str	r3, [r5, #0]
 8002a96:	f7fd fe7a 	bl	800078e <_kill>
 8002a9a:	1c43      	adds	r3, r0, #1
 8002a9c:	d102      	bne.n	8002aa4 <_kill_r+0x1c>
 8002a9e:	682b      	ldr	r3, [r5, #0]
 8002aa0:	b103      	cbz	r3, 8002aa4 <_kill_r+0x1c>
 8002aa2:	6023      	str	r3, [r4, #0]
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000210 	.word	0x20000210

08002aac <_getpid_r>:
 8002aac:	f7fd be68 	b.w	8000780 <_getpid>

08002ab0 <_sbrk_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4d05      	ldr	r5, [pc, #20]	; (8002acc <_sbrk_r+0x1c>)
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4608      	mov	r0, r1
 8002aba:	602b      	str	r3, [r5, #0]
 8002abc:	f7fd fe82 	bl	80007c4 <_sbrk>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d102      	bne.n	8002aca <_sbrk_r+0x1a>
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	b103      	cbz	r3, 8002aca <_sbrk_r+0x1a>
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
 8002acc:	20000210 	.word	0x20000210

08002ad0 <__errno>:
 8002ad0:	4b01      	ldr	r3, [pc, #4]	; (8002ad8 <__errno+0x8>)
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000058 	.word	0x20000058

08002adc <__libc_init_array>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	2600      	movs	r6, #0
 8002ae0:	4d0c      	ldr	r5, [pc, #48]	; (8002b14 <__libc_init_array+0x38>)
 8002ae2:	4c0d      	ldr	r4, [pc, #52]	; (8002b18 <__libc_init_array+0x3c>)
 8002ae4:	1b64      	subs	r4, r4, r5
 8002ae6:	10a4      	asrs	r4, r4, #2
 8002ae8:	42a6      	cmp	r6, r4
 8002aea:	d109      	bne.n	8002b00 <__libc_init_array+0x24>
 8002aec:	f000 f81c 	bl	8002b28 <_init>
 8002af0:	2600      	movs	r6, #0
 8002af2:	4d0a      	ldr	r5, [pc, #40]	; (8002b1c <__libc_init_array+0x40>)
 8002af4:	4c0a      	ldr	r4, [pc, #40]	; (8002b20 <__libc_init_array+0x44>)
 8002af6:	1b64      	subs	r4, r4, r5
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	42a6      	cmp	r6, r4
 8002afc:	d105      	bne.n	8002b0a <__libc_init_array+0x2e>
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b04:	4798      	blx	r3
 8002b06:	3601      	adds	r6, #1
 8002b08:	e7ee      	b.n	8002ae8 <__libc_init_array+0xc>
 8002b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0e:	4798      	blx	r3
 8002b10:	3601      	adds	r6, #1
 8002b12:	e7f2      	b.n	8002afa <__libc_init_array+0x1e>
 8002b14:	08002b64 	.word	0x08002b64
 8002b18:	08002b64 	.word	0x08002b64
 8002b1c:	08002b64 	.word	0x08002b64
 8002b20:	08002b68 	.word	0x08002b68

08002b24 <__retarget_lock_acquire_recursive>:
 8002b24:	4770      	bx	lr

08002b26 <__retarget_lock_release_recursive>:
 8002b26:	4770      	bx	lr

08002b28 <_init>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr

08002b34 <_fini>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr
